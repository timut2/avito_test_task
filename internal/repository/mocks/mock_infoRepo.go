// Code generated by MockGen. DO NOT EDIT.
// Source: D:/vscodeprojects/golang/avito_test/internal/repository/infoRepo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/timut2/avito_test_task/internal/models"
)

// MockInfoRepo is a mock of InfoRepo interface.
type MockInfoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoRepoMockRecorder
}

// MockInfoRepoMockRecorder is the mock recorder for MockInfoRepo.
type MockInfoRepoMockRecorder struct {
	mock *MockInfoRepo
}

// NewMockInfoRepo creates a new mock instance.
func NewMockInfoRepo(ctrl *gomock.Controller) *MockInfoRepo {
	mock := &MockInfoRepo{ctrl: ctrl}
	mock.recorder = &MockInfoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoRepo) EXPECT() *MockInfoRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInfoRepo) Get(userID int) (*models.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID)
	ret0, _ := ret[0].(*models.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInfoRepoMockRecorder) Get(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInfoRepo)(nil).Get), userID)
}
